/* GENERATED BY TYPECHAIN VER. 0.1.5 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper
} from "./typechain-runtime";

export class Article extends TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [{ name: "", type: "uint256" }],
        name: "commits",
        outputs: [
          { name: "ID", type: "bytes32" },
          { name: "Author", type: "address" },
          { name: "timestamp", type: "uint256" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          { name: "author", type: "address" },
          { name: "Id", type: "bytes32" }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [{ indexed: false, name: "newId", type: "bytes32" }],
        name: "ArticleUpdated",
        type: "event"
      },
      {
        constant: true,
        inputs: [],
        name: "getArticleID",
        outputs: [{ name: "", type: "bytes32" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "nModifications",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "Id", type: "bytes32" }],
        name: "update",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<Article> {
    const contract = new Article(web3, address);
    const code = await promisify(web3.eth.getCode, [address]);
    if (code === "0x0") {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get getArticleID(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.getArticleID, []);
  }
  public get nModifications(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.nModifications, []);
  }
  public commits(
    arg0: BigNumber | number
  ): Promise<[BigNumber, string, BigNumber]> {
    return promisify(this.rawWeb3Contract.commits, [arg0.toString()]);
  }

  public updateTx(Id: BigNumber): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "update", [
      Id.toString()
    ]);
  }
}
